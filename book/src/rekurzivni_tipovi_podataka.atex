@chapter{Rekurzivni tipovi podataka}

@p Rekurzivni tipovi podataka su tipovi čije vrednosti mogu "sadržati u sebi" vrednosti istog tipa. Ovakva apstraktna karakterizacija ne znači trenutno mnogo. Zbog toga ćemo u nastavku upoznati se sa dva najznačajnija rekurzivna tipa, a to su @em{liste} i @em{stabla}. Kroz primere, uvidećemo da su rekurzivni tipovi podataka pogodni za predstavljanje vrednosti neograničene složenosti.

@p Važno je napomenuti da su rekurzivni tipovi specijalni slučaj algebarskih tipova podataka (koje smo već upoznali). Ono što izdvaja rekurzivne tipove podataka je to što se u definiciji tipa nalazi tip koji se definiše@note{Baš kao što se u definiciji rekurzivne funkcije pojavljuje sama funkcija koja se definiše. Otuda i ime @em{rekurzivni tipovi podataka}.}

@section{Liste}

@p Konstruisaćemo tip @code{ListaBrojeva} čije vrednosti su liste s celobrojnim vrednostima@note{Već znamo da je to @code{[Int]}, ali ignorišimo to za trenutak.}. Tip @code{ListaBrojeva} mora sadržati vrednost prazne liste, liste sa jednim elementom, liste sa dva elementa, liste sa tri elementa itd... Prazna lista se može predstaviti sa nularnim konstruktorom. Lista sa jednim elementom se može predstaviti sa unarnim konstruktorom, lista sa dva elementa sa binarnim konstruktorom, i tako dalje... Uzimajući ova razmatranja u obzir, dolazimo do naivne ideje o konstrukciju tipa @code{ListaBrojeva} kao sume konstruktora različite arnosti:

@codeBlock{
data ListaBrojeva =
    PraznaListaBrojeva
    | Lista1 Int
    | Lista2 Int Int
    | Lista3 Int Int Int
    | Lista4 Int Int Int Int 
}{Obratite pažnju da je ovo samo algebarska suma podataka, prelomljena u više redova radi preglednosti}

@p Odmah uočavamo problem: s definicijom poput navedene nikad ne možemo obuhvatiti sve liste. Koliko god mi konstruktora napravili, uvek će postojati potreba za još dužom listom tj. za konstruktorom još veće arnosti. Zbog toga moramo iskoristiti rekurzivnu konstrukciju. Lista može biti prazna lista, ili može biti lista koja je nastala spajanjem nekog elementa na početak već postojeće liste. Zbog toga, i tip lista konstruišemo kao sumu dva konstruktora: jedan konstruktor predstavlja praznu listu, dok drugi konstruktor nadovezuje element na listu manje dužine:

@codeBlock{
data ListaBrojeva = DodajBroj Int ListaBrojeva | PraznaListaBrojeva
}

@example{
@p Listu od tri elementa @code{1}, @code{2}, @code{3} možemo konstruisati kao @ccode{DodajBroj 1 (DodajBroj 2 (DodajBroj 3 PraznaListaBrojeva))}.
}

@p Da bi smo prikazivali vrednosti tipa @code{ListaBrojeva} u konzoli, pridružićemo tip @code{ListaBrojeva} klasi @code{Show}:

@codeBlock{
instance Show ListaBrojeva where
    show xs = "<" ++ prikaži xs ++ ">"
        where
            prikaži PraznaListaBrojeva = ""
            prikaži (DodajBroj y PraznaListaBrojeva) = show y
            prikaži (DodajBroj y ys) = show y ++ ", " ++ prikaži ys
}

@p Vrednosti tipa @code{ListaBrojeva} prikazujemo tako što elemente liste navodimo između znakova @code{<} i @code{>} koji podsećaju na izlomljene zagrade@note{Odabrali smo izlomljene zagrade namerno da bi se ispis liste razlikovao od ispisa ugrađenih Haskel lista.}. Za prikazivanje samih elemenata liste koristimo pomoćnu rekurzivnu funkciju @code{prikaži}. Sada možemo elegantno prikazivati vrednosti tipa @code{ListaBrojeva} u interaktivnom okruženju:

@terminal{
ghci> x = DodajBroj 1 (DodajBroj 2 (DodajBroj PraznaListaBrojeva) 
ghci> x
<1, 2, 3>
}

@p Zgodno je implementirati mnoge funkcije za rad sa tipom @code{ListaBrojeva}. Kako je i sama priroda tipa rekurzivna, i ove funkcije će biti (uglavnom) rekurzivne.

@p Dužinu liste je lako pronaći. Dužina prazne liste je @code{0}, a dužina liste nastale dodavanjem broja na listu @code{xs} je za jedan veća od dužine liste @code{xs}.

@codeBlock{
dužina :: ListaBrojeva -> Int
dužina PraznaListaBrojeva = 0
dužina (DodajBroj _ xs) = 1 + dužina xs  
}

@p Funkcija @code{spoji} spaja dve liste vršeći rekurziju po prvoj listi.

@codeBlock{
spoji :: ListaBrojeva -> ListaBrojeva -> Lista
spoji PraznaListaBrojeva xs = xs
spoji (DodajBroj x xs) ys = DodajBroj x (spoji xs ys)
}

@p Funkcija @code{obrni} obrće redosled elemenata liste

@codeBlock{
obrni :: ListaBrojeva -> ListaBrojeva
obrni PraznaListaBrojeva = PraznaListaBrojeva
obrni (DodajBroj x xs) = spoji (obrni xs) x 
}{Primetimo da rekurzivna funkcija @code{obrni} koristi u sebi drugu rekurzivnu funkciju @code{spoji}, zbog čega ova implementacija nije najefikasnija moguća.}

@problem{
Kreirati tip @code{ListaBrojeva1} čije vrednosti su neprazne liste celobrojnih vrednosti.
}

@problem{
Kreirati tip @code{ListaBrojeva2} čije vrednosti su liste celobrojnih vrednosti koje imaju barem dva člana.
}

@problem{
Implementirati funkciju @ccode{parni :: ListaBrojeva -> ListaBrojeva} koja uklanja neparne elemente iz liste.
}

@problem{
Implementirati funkciju @ccode{primeni :: (Int -> Int) -> ListaBrojeva -> ListaBrojeva} koja primenjuje prosleđenu funkciju na svaki element liste.
}

@subsection{Apstraktni tip lista}

@p Tip @code{ListaBrojeva} sadrži samo liste celobrojnih vrednosti. Jasno je da sa sličnom konstrukcijom mogu se definisati i drugi tipovi lista:

@codeBlock{
data ListaChar = DodajChar Char ListaChar | PraznaListaChar

data ListaBool = DodajBool Bool ListaBool | PraznaListaBool
}

@p Ovakvim pristupom za svaki tip moramo definisati odgovarajući tip lista, što nije praktično. Zbog toga, definisaćemo jedan apstraktan tip podataka @code{Lista :: * -> *} čiji parametar označava tip vrednosti sadržanih u listi. Definicija liste ostaje gotovo ista, ali se umesto konkretnog tipa pojavljuje tipski parametar @code{a}:

@codeBlock{
data Lista a = Dodaj a (Lista a) | PraznaLista
}{Nakon konstruktora @code{Dodaj} moraju biti navedeni konkretni tipovi (a ne apstraktni), te je stoga drugi parametar @code{Lista a} a ne @code{Lista}. Ovim je i utvrđena homogenost liste tj. obezbeđeno je da sve vrednosti moraju biti istog tipa. Na primer, ako posmatramo tip @code{Lista Int} tada konstruktor @code{Dodaj} ima tip @code{Int -> Lista Int -> Lista Int}, tj. @code{Dodaj} može dodati samo vrednost tipa @code{Int} na listu tipa @code{Lista Int}. Induktivno sledi da vrednost @code{Lista Int} sadrži samo vrednosti tipa @code{Int}.}

@p Sa apstraktnim tipom se lako mogu predstaviti liste vrednosti bilo kog tipa. Na primer, sada @code{Lista Int} predstavlja tip koji odgovara tipu @code{ListaBrojeva} od malopre, a  @code{Lista Bool} odgovara tipu @code{ListaBool} od malopre. Primetimo da sada konstruktori @code{Dodaj}, @code{PraznaLista} imaju isto ime za sve tipove, što dodatno olakšava zapis.

@terminal{
ghci> x = Dodaj 'a' (Dodaj 'b' PraznaLista)
ghci>:t x
Lista Char
ghci> y = Dodaj True (Dodaj False PraznaLista)
ghci>:t y
Lista Bool
}

@p Definicije funkcija @code{dužina}, @code{spoji}, @code{obrni} ostaju gotovo iste, ali se tipovi menjaju tako da se u njima pojavljuje tipska promenljiva. Na ovaj način ove funkcije postaju polimorfne i mogu se koristiti sa svim tipovima lista:

@codeBlock{
dužina :: Lista a -> Int
dužina PraznaLista = 0
dužina (Dodaj _ xs) = 1 + dužina xs  

spoji :: Lista a -> Lista a -> Lista
spoji PraznaLista xs = xs
spoji (Dodaj x xs) ys = Dodaj x (spoji xs ys)

obrni :: Lista a -> Lista a
obrni PraznaLista = PraznaLista
obrni (Dodaj x xs) = spoji (obrni xs) x 
}

@problem{
Za tip @code{Lista a} implementirati funkcije koje odgovaraju funkcijama @code{filter}, @code{map}, @code{zip} i @code{fold}.
}

@p Novi tip je takođe zgodno dodati u klasu @code{Show}. Implementacija funkcije @code{show} će biti potpuno ista kao implementacija te funkcije za tip @code{ListaBrojeva}. Ali sada moramo bi malo pažljiviji sa klasnim ograničenjima. Za svaki tip @code{T}, implementacija @code{show :: Lista T -> String} koristi u sebi implementaciju funkcije @code{show :: T -> String}, te je neophodno postaviti uslov o tipu @code{T} pri deklaraciji instance @code{Show (Lista T)}@note{Gore o tome nismo razmišljali o ovome, jer @code{Int} pripada klasi @code{Show}. Ali tip poput @code{Int -> Int} ne pripada ovoj klasi, te je besmisleno zahtevati da i @code{Lista (Int -> Int)} pripada ovoj klasi.}.

@codeBlock{
instance Show a => Show (Lista a) where
    show xs = "<" ++ prikaži xs ++ ">"
        where
            prikaži PraznaLista = ""
            prikaži (Dodaj y PraznaLista) = show y
            prikaži (Dodaj y ys) = show y ++ ", " ++ prikaži ys
}

@problem{Uvesti tipove @code{Lista a} u klase @code{Eq} i @code{Ord}, @code{Functor} i @code{Applicative}.}

@subsection{Liste u Haskelu}

@p U Haskelu liste su implementirane upravo onako kako smo i mi to gore uradili:

@codeBlock{
data [] a = [] | a : ([] a) 
}

@p Sa navedenim kodom je definisan jedan apstraktni tip @code{[] :: * -> *}. Pod istim imenom je definisan i konstruktor prazne liste @code{[]}. Drugi konstruktor je konstruktor "dodavanja" @code{:}. Kako se ime @code{:} sastoji od specijalnog znaka, a ne slova, taj konstruktor je infiksni konstruktor@note{U lekciji o operatorima smo naveli da operatori ne mogu da sadrže karakter @code{:}. Međutim, za infiksne konstruktore to pravilo je suprotno: infiksni konstruktori @em{moraju} početi sa @code{:}. Ostale stvari koje smo naveli o operatorima važe i za infiksne konstruktore. Između ostalog, moguće je deklarisati prioritet i asocijativnost infiksnog konstruktora sa odgovarajućim @code{infix} deklaracijama.}, te se navodi između argumenata.

@p Haskell kompajler dozvoljava da se tip @code{[] a} zapiše kao @code{[a]}. Ovaj izuzetak u Haskell sintaksi značajno poboljšava čitljivost tipova. Takođe, izuzetak postoji i konstrukciji samih vrednosti, te se vrednost @ccode{a:b:c:[]}, može zapisati i kao @code{[a, b, c]} i slično.

@section{Stabla}

@p Za liste se kaže da su @em{linearne} strukture podataka, jer elementi na prirodan način čine niz. Svaki element liste, osim poslednjeg, poseduje jedinstvenog sledbenika. Isto tako, svaki element, osim prvog, poseduje jedinstvenog prethodnika. Koliko god liste bile korisne, liste nisu uvek najbolji izbor za reprezentaciju podataka. 

@p @def{Stablo} je rekurzivna struktura podataka sačinjena od @em{čvorova}, u kojoj svaki čvor sadrži @em{vrednost} i nekoliko manjih stabala (od kojih neka mogu biti prazna). Specijalno, @def{binarno stablo} je stablo u kom svaki čvor sadrži vrednost i dva manja stabla@note{Koja pritom mogu biti prazna}.

@p Tip binarnog stabla koje sadrži u sebi vrednosti tipa @code{Int} možemo kreirati na sledeći način: prazno stablo ćemo kreirati sa nularnim konstruktorom @code{PraznoStablo}, dok ćemo čvorove kreirati sa konstruktorom @code{Čvor}. Konstruktor @code{Čvor} zavisi od tri parametara: vrednosti tipa @code{Int}, kao i od dve vrednosti tipa @code{StabloBrojeva}:

@codeBlock{
data StabloBrojeva =
    PraznoStablo
    | Čvor Int StabloBrojeva StabloBrojeva
    deriving (Show, Eq)
}{Izvedene instance @code{Show StabloBrojeva} i @code{Eq StabloBrojeva} su sasvim dovoljne za nas.}

@example{
@p Vrednost
@codeBlock{
stablo1 = Čvor 1
    (Čvor 2 PraznoStablo PraznoStablo)
    (Čvor 3 PraznoStablo PraznoStablo)
}
@p predstavlja naredno stablo sa tri čvora:

@figure{tree1}

@p Ovo stablo je sačinjeno od čvora koji sadrži vrednost @m{1} kao i dva manja stabla. Ta dva manja stabla su sačinjena od po jednog čvora koji sadrži vrednost @m{2}, odnosno @m{3}. Ovi čvorovi u sebi sadrže prazna stabla (koje ne predstavljamo na slikama).

@p Za čvor @m{1} kažemo da je @em{roditelj} čvorova @m{2} i  @m{3}, dok za čvorove @m{2} i @m{3} često kažemo i da su @em{deca} čvora @m{1}. Za jedinstveni čvor koji se nalazi na samom vrhu stabla, ovde je to @m{1}, kažemo da je @em{koren} stabla. Za čvorove koji nemaju decu kažemo da su @em{listovi} stabla: u ovom stablu to su @m{2} i @m{3}.
}

@example{
@p Naredna vrednost predstavlja stablo sa šest čvorova:
@codeBlock{
stablo2 = Čvor 5
    (Čvor 3
        (Čvor 2 PraznoStablo PraznoStablo)
        (Čvor 4 PraznoStablo PraznoStablo))
    (Čvor 6
        PraznoStablo
        (Čvor 8 PraznoStablo PraznoStablo))
}

@figure{tree2}

@p U ovom stablu, @m{5} je koren, a čvorovi @m{2}, @m{4} i @m{8} su listovi. Primetimo da u stablu čvor @m{6} ima samo jedno dete.
}

@p Stabla su pogodne strukture podataka za modelovanje mnogih odnosa koje srećemo u svakodnevnici@note{Na primer, pokušajte da sa stablom predstavite porodično stablo: sve vaše direktne pretke (roditelje, roditelje roditelja, itd...). Uvidećete da je porodično stablo zaista jedno binarno stablo. Isprava zbunjujuće, ali u takvom predstavljanju @em{deca} čvorova će zapravo biti @em{roditelji} osobe...}.

@p Prvo bi bilo zgodno napisati funkciju @code{brojČvorova} koja određuje broj čvorova u stablu@note{Kao što funkcija @code{length} određuje broj elemenata u listi.}. Naravno, funkciju ćemo implementirati rekurzivno, podudaranjem vrednosti po konstruktorima. Broj čvorova u praznom stablu je @m{0}. Broj čvorova u stablu @code{Čvor a l r} je za jedan veći od zbira broja čvorova u podstablima @code{l} i @code{r}:

@codeBlock{
brojČvorova :: StabloBrojeva -> Int
brojČvorova PraznoStablo = 0
brojČvorova (Čvor _ l r) = 1 + brojČvorova l + brojČvorova r
}

@terminal{
ghci> brojČvorova stablo1
3
ghci> brojČvorova stablo2
6
}{Vrednosti @code{stablo1} i @code{stablo2} su definisana u prethodnim primerima.}

@p Još jedna numerička karakteristika je @em{visina} stabla koja predstavlja najveći broj koraka od korena stabla do nekog lista. Drugim rečima, visina stabla predstavlja broj "generacija" prisutnih u stablu. Visinu stabla ćemo takođe izračunati rekurzivno: visina praznog stabla je @m{0}, a visina stabla @code{Čvor a l r} je maksimum visina stabala @code{l} i @code{r} uvećan za jedan:

@codeBlock{
visinaStabla :: StabloBrojeva -> Int
visinaStabla PraznoStablo = 0
visinaStabla (Čvor _ l r) = 1 + max (visinaStabla l) (visinaStabla r)
}

@terminal{
ghci> visinaStabla stablo1
2
ghci> visinaStabla stablo2
3
}

@p Korisna je i funkcija koja proverava da li se neka vrednost nalazi u stablu@note{Kao što funkcija @code{elem} proverava da li se vrednost nalazi u listi.}. Strategija za pretragu je sledeća: ako čvor sadrži vrednost koju tražimo, tada se pretraga završava. U suprotnom, pretragu nastavljamo rekurzivno, pretražujući oba stabla:

@codeBlock{
elementStabla :: Int -> StabloBrojeva -> Bool
elementStabla _ PraznoStablo = False
elementStabla v (Čvor a l r)
    | v == a = True
    | v /= a = elementStabla v l || elementStabla v r
}

@terminal{
ghci> elementStabla 6 stablo1
False
ghci> elementStabla 6 stablo2
True
}

@problem{
Implementirati funkciju @ccode{zbir :: StabloBrojeva -> Int} koja sabira vrednosti svih čvorova u stablu.
}

@problem{
Implementirati funkciju @ccode{dupliraj :: StabloBrojeva -> StabloBrojeva} koja duplira vrednost svakog čvora, dok samu strukturu stabla ne menja. 
}

@problem{
Implementirati funkciju @ccode{najveći :: StabloBrojeva -> Int} koja pronalazi najveći element u stablu.
}

@subsection{Uređena stabla}

@p Stabla u kojima vrednost u svakom čvoru je veća od svake vrednosti u odgovarajućem levom podstablu, i manja od svake vrednosti odgovarajućem desnom podstablu, nazivamo @def{uređena stabla}. 


@problem{
Napisati funkciju @ccode{uređeno :: StabloBrojeva -> Bool} koje proverava da li je stablo uređeno.
}

@example{
@p Stablo @code{stablo1} nije uređeno jer je vrednost u korenskom čvoru manja od vrednosti u levom podstablu.

@p Stablo @code{stablo2} je uređeno jer je @m{3} veće od @m{2} a manje od @m{4}, @m{6} je manje od @m{8}, a @m{5} je veće @m{3}, @m{2} i @m{4}, i manje od @m{6} i @m{8}. 
}

@p Uređene stabla su veoma korisna jer se neki algoritmi mogu efikasno implementirati. Na primer, prilikom pretrage uređenog stabla često je potrebno izvršiti značajno manje poređenja: ako tražimo neku vrednost @m{m} u stablu čiji korenski čvor je @m{n} tada je dovoljno nastaviti pretragu samo u levom (odnosno desnom) podstablu ako je @m{m < n} (odnosno ako je @m{m > n}). Oslanjajući se na činjenicu da je korenski čvor veći (odnosno manji) od svih vrednosti u levom (odnosno desnom) podstablu, možemo ignorisati jedno od podstabala. Kôd za pretragu uređenog podstabla je sledeći:

@codeBlock{
elementUređenogStabla :: Int -> StabloBrojeva -> Bool
elementUređenogStabla v (Čvor a l r)
    | v == a = True
    | v <  a = elementUređenogStabla v l
    | v >  a = elementUređenogStabla v r  
}

@example{
@p Funkcija @code{elementStabla} primenjena na vrednosti @code{8} i @code{stablo2} će imati sledeći tok: pošto je vrednost korenskog čvora (@code{5}) različita od @code{6}, funkcija će rekurzivno proveriti da li se vrednost @code{6} nalazi u levom podstablu. Pri toj pretrazi, funkcija ponovo rekurzivno proverava vrednosti čvorova @m{3}, @m{2} i @m{5}. Pošto levo podstablo ne sadrži traženu vrednost, prelazi se na desno podstablo. Prvo se proverava vrednost korena tog podstabla (čvor @m{6}), a zatim se prelazi na desno dete, gde se pronalazi tražena vrednost. Primetimo da je algoritam obišao celokupno stablo pri pretrazi.

@p Pogledajmo sada izvršavanje funkcije @code{elementUređenogStabla} primenjene na iste vrednosti @code{8} i @code{stablo2} (ovo stablo je uređeno, te ima smisla koristiti ovu funkciju). Pošto је tražena vrednost veća od vrednosti korenskog čvora @m{5}, algoritam rekurzivno nastavlja pretragu na desnom podstablu. Vrednost @code{8} je takođe veća od vrednosti (sada korenskog) čvora @m{6}, te se ponovo prelazi na desno podstablo. Međutim korenski čvor sada poseduje traženu vrednost, i pretraga se uspešno prekida. Primetimo da smo obišli samo dva čvora pre nego što smo prekinuli pretragu.
}

@p Kao što vidimo iz prethodnog primera, pretraga uređenog stablo može biti značajno efikasnija nego pretraga neuređenog stabla. Zaista, ako je dato stablo koje poseduje @m{n} generacija, tada to stablo može posedovati @eq{2^0 +2^1 + 2^2 + \cdots + 2^n = 2^{n+1} - 1} čvorova. Pretraga ovakvog stabla bi u najgorem slučaju zahtevala @m{2^{n+1} - 1} rekurzivnih poziva funkcije (računajući i prvi poziv), jer je neophodno da algoritam obiđe sve čvorove da bi dao definitivan odgovor. Sa druge strane, ako je to stablo uređeno, tada je u najgorem slučaju dovoljno izvršiti samo @m{n} rekurzivnih poziva.

@problem{
Implementirati funkciju @ccode{najvećiUređeno :: StabloBrojeva -> Int} koja pronalazi najveći element u uređenom stablu.
}

@subsection{Apstraktni tip stabla}

@p Naravno, u čvorovima stabla korisno je postavljati i vrednosti drugih tipova osim @code{Int}. Stoga je zgodno napraviti apstraktni tip  @code{Stablo :: * -> *} koji će omogućiti uopštenu konstrukciju binarnog stabla. Jedini parametar ovog apstraktnog tipa, biće tip koji označava tip vrednosti sadržane u čvoru. Gore navedenu rekurzivnu definiciju je potrebno neznatno izmeniti:

@codeBlock{
data Stablo a = PraznoStablo | Čvor a (Stablo a) (Stablo a)
    deriving (Show, Eq)
}{Obratite pažnju da su imena konstruktora ostala ista, te stoga se ova definicije ne može nalaziti u istoj datoteci kao definicija tipa @code{StabloBrojeva}. Imena su namerno ostavljena ista, da bi bilo jasnije o čemu se radi.}

@p Funkcije poput @code{brojČvorova} i @code{visinaStabla} imaju potpuno istu definiciju ali im se tip neznatno menja:

@codeBlock{
brojČvorova :: Stablo a -> Int
brojČvorova PraznoStablo = 0
brojČvorova (Čvor _ l r) = 1 + brojČvorova l + brojČvorova r

visinaStabla :: Stablo a -> Int
visinaStabla PraznoStablo = 0
visinaStabla (Čvor _ l r) = 1 + max (visinaStabla l) (visinaStabla r)
}{Imajte na umu da ove dve definicije ne mogu biti u istoj datoteci kao prethodne definicije, jer se tipovi razlikuju.}

@p Funkcija @code{elementStabla} mora koristiti operator @code{(==) :: Eq a => a -> a -> a}. Stoga je potrebno da i tip funkcije @code{elementStabla} bude ograničen @code{Eq} klasom. Osim toga, definicija funkcije je potpuno ista:

@codeBlock{
elementStabla :: Eq a => a -> Stablo a -> Bool
elementStabla _ PraznoStablo = False
elementStabla v (Čvor a l r)
    | v == a = True
    | v /= a = elementStabla v l || elementStabla v r
}

@p Ako želimo da govorimo i o uređenim stablima, tada se moramo ograničiti na klasu @code{Ord}.

@problem{
Implementirati funkciju @ccode{uređeno :: Ord a => Stablo a -> Bool} koje proverava da li je stablo uređeno.
}

@problem{
Implementirati funkciju @ccode{elementUređenogStabla :: Ord a => a => Stablo a -> Bool} koje proverava da li vrednost pripada uređenom stablu.
}

@subsection{Stabla kao funktori}

@p U jednoj od prethodnih lekcija obradili smo funktore. Funktor je apstraktni tip @code{T :: * -> *} koji dozvoljava implementaciju funkcije mapiranja @ccode{fmap :: (a -> b) -> T a -> T b}, koja zadovoljava određene osobine. Na primeru lista i možda-tipova, uvideli smo da o @code{fmap} možemo misliti kao o funkciji koja primenjuje prosleđenu funkciju na svaku vrednost tipa @code{a} sadržanoj u vrednosti tipa @code{T a}, pri čemu se sama struktura vrednosti tipa @code{T a} čuva.

@p I goredefinisani tip @code{Stablo :: * -> *} može biti instanca klase @code{Functor}. Primetimo prvo da @code{Stablo} je odgovarajuće vrste @code{* -> *}. Zatim, ako razmislimo o tome šta @code{fmap} radi na primeru drugih funktora, lako se dolazi do ideje da @code{fmap} primenjuje datu funkciju na vrednost u svakom čvoru stabla@note{Ovo je samo heuristički argument, do kog smo došli iskustvom. U nastavku ćemo dokazati da ovako definisana @code{fmap} funkcija zaista zadovoljava odgovarajuće osobine.}.

@codeBlock{
instance Functor Stablo where
    fmap f (Stablo a l r) = Stablo (f a) (fmap f l) (fmap f r)
    fmap _ PraznoStablo   = PraznoStablo
}{Za instanciranje @code{Functor} klase, dovoljno je implementirati @code{fmap} funkciju.}

@p Potrebno je uveriti se da ovako definisana @code{fmap} funkcija zadovoljava dve zakonitosti:

@list{
@li Podizanje identičke funkcije je identička funkcija, tj @code{fmap id = id}
@li Podizanje kompozicije je kompozicija podizanja, tj. @code{fmap (g. f) = fmap g . fmap f}.
}

@p Zakone možemo dokazati totalnom indukcijom po visini stabla. Na primer, dokažimo prvi zakon@note{Konstruišite analogni dokaz za drugi zakon.}. Baza indukcije su stabla visine @m{0}, a to su prazna stabla. Funkcija @code{fmap id} primenjena na vrednost @code{PraznoStablo} je po definiciji @code{PraznoStablo}. Dalje, za induktivni korak pretpostavimo da tvrđenje važi za sva stabla čija visina je ne veća od @m{n} i dokažimo da onda važi i za stabla visine @m{n+1}. Neka je @code{Stablo a l r} stablo visine @m{n+1}. Funkcija @code{fmap id} primenjena na vrednost @code{Stablo a l r} je po definiciji @ccode{Stablo (id a) (fmap id l) (fmap id r) = Stablo a (fmap id l) (fmap id r)}. Kako su @code{l} i @code{r} stabla visine ne veće od @m{n}, po induktivnoj pretpostavci važi da je @code{fmap id l = l} i @code{fmap id r = r}. Prema tome, primena funkcije @code{fmap id} na vrednost @code{Stablo a l r} daje istu tu vrednost. Indukcijom sledi da ovo važi za sva stabla, pa je @code{fmap id} zaista @code{id :: Stablo a -> Stablo a}.

@problem{
Klasa @code{Functor} definiše i operator @code{<$} kao @code{fmap . const}. Šta u kontekstu instance @code{Functor Stablo}, radi operator @code{<$}?
}

@problem{Kreirati tip @code{TernarnoStablo :: * -> *} koji predstavlja stablo u kom svaki element ima tri direktna potomka. Implementirati funkcije za rad sa ovim tipom. Instancirati @code{Functor TrenarnoStablo}}

@section{Aritmetički izrazi}

@p Česta primena rekurzivnih tipova podataka je predstavljanje izraza (bilo matematičkih izraza, bilo izraza nekog programskog jezika). Izrazi su vrednosti koji koje mogu biti neograničeno složenosti, zbog čega su rekurzivni tipovi zaista neophodni za njihovo predstavljanje@note{Istaknimo da ovde ne govorimo o definisanju pojma funkcija uz pomoć aritmetičkih izraza u Haskelu, već o definisanju samog pojma @em{izraza} kao Haskel vrednosti.}. Na primer, ako posmatramo izraze koji su sačinjeni samo od prirodnih brojeva, sabiranja i množenja, tada lako možemo naći neograničeno mnogo izraza, pri čemu složenost svakog izraza je proizvoljno velika, npr:
@eq{1+1,}
@eq{22 * (1 + 6),}
@eq{((10+32) * 18) * (333 + 4)...}

@p Da bismo našli pogodan način predstavljanja matematičkih izraza, za primer pogledajmo rekurzivnu strukturu izraza @eq{(17 + 3) * (10 * (1 + 1)).} Navedeni izraz predstavlja zbir dva manja izraza @m{17 + 3} i @m{10 * (1 + 1)}. Prvi od tih izraza je zbir dva broja, dok je drugi proizvod broja i još manjeg izraza @m{1 + 1}. Na ovom primeru vidimo da su izrazi sačinjeni od manjih izraza ili brojeva koji se kombinuju uz pomoć dve operacije.

@p Navedeno razmatranje nas dovodi do rekurzivne definicije tipa @code{Izraz}. Vrednosti tipa @code{Izraz} konstruisaćemo na tri načina. Prvo, svaki prirodan broj za sebe čini izraz. Drugo, ako su data dva izraza, onda je i njihov zbir izraz. Treće, ako su data dva izraza onda je i njihov proizvod izraz:

@codeBlock{
data Izraz =
    Broj Int
    | Zbir Izraz Izraz
    | Proizvod Izraz Izraz
}

@example{
@p Sada izraz @m{22 * (1 + 6)} možemo da predstavimo sa vrednošću:
@ccode{Proizvod (Broj 22) (Zbir (Broj 1) (Broj 6))}.
Ova vrednost se može predstaviti i kao naredno stablo:

@figure{tree3}
}

@p Kao što vidimo, vrednosti tipa @code{Izraz} se mogu shvatiti kao stabla, čiji listovi su brojevi, dok ostali čvorovi predstavljaju operacije sabiranja ili množenja. Stabla poput ovih nazivamo @def{sintaksna stabla}. Sa sintaksnim stablima se mogu prezentovati matematički izrazi ali i izrazi nekog programskog jezika, te je stoga ova struktura ključna za programe poput kompajlera i interpretera.

@p Naravno, novodefinisani tip želimo da uvedemo u neke klase. Najkorisnije je implementirati funkciju @code{show}, koja je će izraz predstaviti u obliku na koji smo do sada navikli.

@codeBlock{
instance Show Izraz where
    show (Broj a) = show a
    show (Zbir a b) = "(" ++ show a ++ "+" ++ show b ++ ")"
    show (Proizvod a b) = "(" ++ show a ++ "*" ++ show b ++ ")"
}

@p Druga funkcija koju je najlogičnije implementirati  je funkcija @code{izračunaj :: Izraz -> Int}, koja izraz sračunava izraz u jedinstvenu vrednost. Funkciju implementiramo rekurzivno: sračunavanjem broja se dobija taj isti broj, dok se sračunavanjem zbira (proizvoda) dva izraza dobija zbir (proizvod) vrednosti koje su dobijene sračunavanjem odgovarajućih podizraza:

@codeBlock{
izračunaj :: Izraz -> Int
izračunaj (Broj a) = a
izračunaj (Zbir a b) = izračunaj a + izračunaj b
izračunaj (Proizvod a b) = izračunaj a * izračunaj b
}


@problem{
Kreirati tip @code{MatematičkiIzraz} čije vrednosti mogu da prezentuju matematičke izraze sačinjene od nepoznate @m{x}, realnih brojeva, operacija sabiranja, oduzimanja, množenja, deljenja i stepenovanja kao i funkcija poput sinusa i kosinusa. Napisati funkciju koja izračunava ove izraze u zavisnosti od vrednosti nepoznate. Implementirati funkciju koja računa izvod matematičkog izraza.
}

@problem{
@em{Za ovaj zadatak je neophodno uraditi prethodni zadatak} Ako ste upoznati sa @em{LaTeX} jezikom za zapisivanje matematičke notacije, konstruišite funkciju @ccode{uLatex :: MatematičkiIzraz -> String} koja daje @em{LaTeX} kôd za dati izraz. Koristite @em{LaTeX} naredbe poput @pre{\times}, @pre{^}, @pre{\frac}, @pre{\left(} i @pre{\right)}, i tako dalje... }

@problem{
Definisati tip @code{LogičkiIzraz} koji predstavlja logičke izraze sačinjene od logičkih vrednosti i operacija konjunkcije i disjunkcije. Uvesti tip @code{LogickiIzraz} u @code{Show} klasu tipova. Implementirati funkciju @code{izracunajLogički :: LogičkiIzraz -> Bool} koja izračunava zadati logički izraz.}

@problem{
@em{Za ovaj zadatak je neophodno uraditi prethodni zadatak} Neka je data funkcija @code{f :: Int -> Bool} sa @code{f x = x \=0}. Konstruisati funkciju @code{konvertuj :: Izraz -> LogičkiIzraz} koja logički izraz prevodi u aritmetički izraz tako što sabiranje prevodi u disjunkciju, množenje u konjunkciju a brojeve u skladu sa datom funkcijom @code{f}. Na primer, izraz @code{2 * (7 + 0)} se konvertuje u @m{\top\land(\top\lor\bot).} Da li važi @ccode{f . izračunaj = izracunajLogički . konvertuj}
}

@subsection{Parsiranje matematičkih izraza}

@p Gore smo definisali instancu @code{Show Izraz} na sasvim jednostavan način. Kako to obično biva, obrnuti proces je značajno komplikovaniji za implementaciju. Međutim, tehnika aplikativnih parsera koju smo predstavili u lekciji o funktorima, može nam pomoći u ovom slučaju. Sa parserom kog budemo konstruisali, moći ćemo da iz niske pročitamo vrednost @code{Izraz}.

@p Pre nego što počnemo sa definisanjem parsera, moramo tačno definisati oblik niska koje ćemo parsirati. Na primer, složeni parseri izraza mogu ispravno parsirati izraze poput @code{"2 +  5"} ili @code{"2*-7+6"} jer su napravljeni tako da ignorišu beline (razmake), da vode računa o prioritetu operacija, podržavaju unarni operator negacije, itd... Da bismo skratili naredne redove, mi nećemo kreirati ovako složeni parser. Parser koji budemo konstruisali moći će da parsira samo one izraze koji su nastali sa funkcijom @code{show :: Izraz -> String} tj, izraze sačinjene isključivo od cifara i znakova @code{+}, @code{-}, @code{(}, @code{)}, pri čemu se oko svakog podizraza nalaze zagrade (osim oko samih brojeva).
  
@p Kako je i sama struktura tipa @code{Izraz} rekurzivna, i parser tipa @code{Parser Izraz} biće rekurzivan. Posebno ćemo konstruisati parser @code{izrazBroj} koji parsira brojeve, parser @code{izrazZbir} koji parsira zbir dva manja izraza, i parser @code{izrazProizvod} koji parsira proizvod dva manja izraza.

@p Pretpostavimo da su navedeni parseri definisani. Jedan izraz može biti broj, proizvod ili zbir manjih izraza. Zbog toga, da bi parsirali izraz, prvo ćemo pokušati da parsiramo broj. Ako to ne uspemo, onda ćemo pokušati da parsiramo zbir, a ako ni to ne uspemo pokušaćemo da parsiramo proizvod@note{Pritom, ovde uopšte nije bitno kojim redom pokušavamo pa pokrenemo parsere. U složenijim parserima, poredak je često bitan}. Sa kombinatorom @code{ili} lako dobijamo željeni parser:

@codeBlock{
izraz :: ParserIzraz
izraz = izrazBroj `ili` izrazZbir `ili` izraz 
}

@p Ostaje još definisati @code{izrazBroj}, @code{izrazZbir} i @code{izrazProizvod}. Parser @code{izrazBroj} ćemo lako definisati pomoću parsera @code{broj :: Parser Int} kog posedujemo od ranije. Sve što je potrebno je da parsiranu vrednost (koja je tipa @code{Int}), transformišemo u vrednost tipa @code{Izraz}, što se naravno postiže podizanjem konstruktora @code{Broj :: Int -> Izraz} na nivo funktora @code{Parser}:

@codeBlock{
izrazBroj :: Parser Izraz
izrazBroj = fmap Broj broj
}

@p Parser @code{izrazZbir} mora da funkcioniše na sledeći način: prvo je neophodno parsirati simbol za levu zagradu, zatim je potrebno parsirati levi sabirak, pa simbol plus, desni sabirak, i na kraju simbol desne zagrade. Rezultati parsiranja simbola nisu bitni (ako su uspešni), a rezultate parsiranja levog i desnog sabirka moramo ukombinovati u vrednost oblika @code{Zbir x y :: Izraz}. Naravno, u tome će nam pomoći podizanje konstruktora @code{Zbir}. Takođe, kako su oba sabirka izrazi sami za sebe, potrebno ih je parsirati sa @code{izraz} parserom. Ovo uspostavlja rekurziju.

@codeBlock{
izrazZbir :: Parser Izraz
izrazZbir =
    simbol '(' *>
    (Zbir <$> (izraz <* simbol '+') <*> izraz)
    <* simbol ')' 
}

@p Parsiranje proizvoda je u potpunosti analogno parsiranju zbira:

@codeBlock{
izrazProizvod :: Parser Izraz
izrazProizvod = 
    simbol '(' *>
    (Proizvod <$> (izraz <* simbol '*') <*> izraz)
    <* simbol ')' 
}

@p Testiranjem se uveravamo da parser funkcioniše:

@terminal{
ghci> parsiraj izraz "(1+2)"
Just ("",(1+2))
ghci> parsiraj izraz "((10+2)*32)"
Just ("",((10+2)*32))
}{Vrednost koju vidimo u drugoj koordinati rezultat je zapravo sintaksno stablo. Međutim, zbog načina na koje smo definisali @code{show}, ovo sintaksno stablo se prikazuje na sasvim jednostavan način.}

@p Samo jedan korak nas deli od implementacije primitivnog kalkulatora. Sve što je potrebno uraditi je primeniti funkciju @code{izračunaj} na rezultat parsiranja. Ali, kako je rezultat parsiranja tipa @code{Maybe (String, Izraz)}, neophodno je proći funkcijom @code{izračunaj} kroz @code{Maybe} i @code{(String, )}. 

@codeBlock{
parsirajIzračunaj :: String -> Maybe Int
parsirajIzračunaj s = fmap (izračunaj . snd) (parsiraj izraz s)
}

@terminal{
ghci> parsirajIzračunaj "(2+(4*3))"
Just 14
}

@todo{foldable klasa}
